package com.example.skylink.persistence.Implementations.hsqldb;

import com.example.skylink.objects.Interfaces.iPassengerData;
import com.example.skylink.persistence.Interfaces.iFlightBookingDB;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;

public class FlightBookingHSQLDB implements iFlightBookingDB {
    private final String dbPath;
    private final String CREATE_TABLE = "CREATE MEMORY TABLE PUBLIC.BOOKINGS ("
            + "id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
            + "flightID VARCHAR(10) NOT NULL, "
            + "userID INT NOT NULL, "
            + "direction VARCHAR(10) NOT NULL, "
            + "passengers INT NOT NULL, "
            + "passengerSeats INT NOT NULL, "
            + "price INT NOT NULL, "
            + "paid BOOLEAN NOT NULL, "
            + "FOREIGN KEY (userID) REFERENCES PUBLIC.USER (id), "
            + "FOREIGN KEY (flightID) REFERENCES PUBLIC.FLIGHTS (flightNumber)"
            + ")";
    public FlightBookingHSQLDB(String dbPath) {
        this.dbPath = dbPath;
    }

    private Connection connect() throws SQLException {
        return DriverManager.getConnection("jdbc:hsqldb:file:" + dbPath + ";shutdown=true", "SA", "");
    }

    public void addBooking(iPassengerData passengerData) {
        String sql = "INSERT INTO PUBLIC.BOOKINGS (flightID, userID, direction, passengers, passengerSeats, price, paid) VALUES (?, ?, ?, ?, ?, ?, ?)";

        try (Connection conn = connect();
             PreparedStatement ps = conn.prepareStatement(sql)) {

            // Set the parameter values based on your data
            ps.setString(1, "yourFlightID");
            ps.setInt(2, 123); // Replace with the actual userID
            ps.setString(3, "Outbound"); // Replace with the actual direction
            ps.setInt(4, 2); // Replace with the actual number of passengers
            ps.setInt(5, 2); // Replace with the actual number of passenger seats
            ps.setInt(6, 200); // Replace with the actual price
            ps.setBoolean(7, true); // Replace with the actual payment status

            // Execute the SQL query
            ps.executeUpdate();

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

//    public Booking getBookingByFlightAndUser(String flightID, int userID) {
//        String sql = "SELECT * FROM PUBLIC.BOOKINGS WHERE flightID = ? AND userID = ?";
//        Booking booking = null;
//
//        try (Connection conn = connect();
//             PreparedStatement ps = conn.prepareStatement(sql)) {
//
//            ps.setString(1, flightID);
//            ps.setInt(2, userID);
//
//            try (ResultSet rs = ps.executeQuery()) {
//                if (rs.next()) {
//                    // Create a Booking object and populate it with the retrieved data
//                    booking = new Booking();
//                    booking.setId(rs.getInt("id"));
//                    booking.setFlightID(rs.getString("flightID"));
//                    booking.setUserID(rs.getInt("userID"));
//                    booking.setDirection(rs.getString("direction"));
//                    booking.setPassengers(rs.getInt("passengers"));
//                    booking.setPassengerSeats(rs.getInt("passengerSeats"));
//                    booking.setPrice(rs.getInt("price"));
//                    booking.setPaid(rs.getBoolean("paid"));
//                }
//            }
//
//        } catch (SQLException e) {
//            e.printStackTrace();
//        }
//
//        return booking;
//    }



    public iFlightBookingDB initialize() {
        try (Connection conn = connect();
             Statement stmt = conn.createStatement()) {

            stmt.executeUpdate(CREATE_TABLE);

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return this;
    }

    public iFlightBookingDB drop() {
        String sql = "DROP TABLE BOOKINGS";
        try (Connection conn = connect();
             Statement stmt = conn.createStatement()) {
            stmt.executeUpdate(sql);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return this;
    }

}
