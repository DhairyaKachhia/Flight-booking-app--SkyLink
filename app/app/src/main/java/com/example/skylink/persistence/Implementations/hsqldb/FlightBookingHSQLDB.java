package com.example.skylink.persistence.Implementations.hsqldb;

import com.example.skylink.objects.Interfaces.iFlightInfo;
import com.example.skylink.objects.Interfaces.iPassengerData;
import com.example.skylink.persistence.Interfaces.iFlightBookingDB;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;

public class FlightBookingHSQLDB implements iFlightBookingDB {
    private final String dbPath;
    private final String CREATE_TABLE = "CREATE MEMORY TABLE PUBLIC.BOOKINGS ("
            + "id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
            + "flightID VARCHAR(10) NOT NULL, "
            + "userID INT NOT NULL, "
            + "direction VARCHAR(10) NOT NULL, "
            + "price INT NOT NULL, "
            + "paid BOOLEAN NOT NULL, "
            + "FOREIGN KEY (userID) REFERENCES PUBLIC.USER (id), "
            + "FOREIGN KEY (flightID) REFERENCES PUBLIC.FLIGHTS (flightNumber)"
            + ")";

    public FlightBookingHSQLDB(String dbPath) {
        this.dbPath = dbPath;
    }

    private Connection connect() throws SQLException {
        return DriverManager.getConnection("jdbc:hsqldb:file:" + dbPath + ";shutdown=true", "SA", "");
    }

    public void addFlightBooking(long user_id, String bound, iFlightInfo flightInfo, int price) {
        try (Connection conn = connect()) {
            conn.setAutoCommit(false);

            try {
                long booking_id = registerBooking(conn, user_id, bound, flightInfo, price);
                registerFlyers(conn, booking_id, flightInfo);
                conn.commit();
            } catch (SQLException e) {
                conn.rollback();
                e.printStackTrace();
            } finally {
                conn.setAutoCommit(true);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private long registerBooking(Connection conn, long user_id, String bound, iFlightInfo flightInfo, int price) throws SQLException {
        String sql = "INSERT INTO PUBLIC.BOOKINGS (flightID, userID, direction, passengers, passengerSeats, price, paid) VALUES (?, ?, ?, ?, ?, ?, ?)";

        try (PreparedStatement ps = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            // Set the parameter values based on your data
            ps.setString(1, flightInfo.getFlight().getFlightNumber());
            ps.setLong(2, user_id);
            ps.setString(3, bound);
            ps.setInt(6, price);
            ps.setBoolean(7, true);

            // Execute the SQL query and retrieve generated keys
            int affectedRows = ps.executeUpdate();

            if (affectedRows == 0) {
                throw new SQLException("Creating booking failed, no rows affected.");
            }

            // Retrieve the generated keys
            try (ResultSet generatedKeys = ps.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    return generatedKeys.getLong(1);
                } else {
                    throw new SQLException("Creating booking failed, no ID obtained.");
                }
            }
        }
    }


    private void registerFlyers(Connection connect, long booking_id, iFlightInfo flightInfo) throws SQLException {
         flightInfo.getSeatSelected().forEach((passengerData, seatNumber) -> {
             try {
                 insertIntoTravellers(connect, booking_id, passengerData, seatNumber);
             } catch (SQLException e) {
                 throw new RuntimeException(e);
             }
         });
    }

    private void insertIntoTravellers(Connection conn, long booking_id, iPassengerData passenger, String seatNumber) throws SQLException {
        String sql = "INSERT INTO PUBLIC.TRAVELLER (traveller_name, seat_number, booking_id) VALUES (?, ?, ?)";

        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            String travellerName = passenger.getFirstName() + " " + passenger.getLastName();
            ps.setString(1, travellerName);
            ps.setString(2, seatNumber);
            ps.setLong(3, booking_id);
            ps.executeUpdate();
        }
    }






    public iFlightBookingDB initialize() {
        try (Connection conn = connect();
             Statement stmt = conn.createStatement()) {

            stmt.executeUpdate(CREATE_TABLE);

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return this;
    }

    public iFlightBookingDB drop() {
        String sql = "DROP TABLE BOOKINGS";
        try (Connection conn = connect();
             Statement stmt = conn.createStatement()) {
            stmt.executeUpdate(sql);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return this;
    }

}
